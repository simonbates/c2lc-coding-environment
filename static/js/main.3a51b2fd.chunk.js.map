{"version":3,"sources":["CommandPalette.js","CommandPaletteCategory.js","CommandPaletteCommand.js","DashDriver.js","DeviceConnectControl.js","ProgramUtils.js","ProgramBlockEditor.js","TextSyntax.js","Utils.js","ProgramTextEditor.js","EditorContainer.js","Interpreter.js","MicMonitor.js","SoundexTable.js","C2lcMath.js","TurtleGraphics.js","WebSpeechEventProcessor.js","WebSpeechInput.js","App.js","FeatureDetection.js","serviceWorker.js","index.js"],"names":["CommandPalette","Tab","Container","id","this","props","defaultActiveKey","Nav","variant","React","map","children","category","Item","Link","eventKey","title","Content","CommandPaletteCategory","Pane","CommandPaletteCommand","handleClick","onChange","commandName","selectedCommandName","Button","className","aria-label","intl","formatMessage","aria-pressed","onClick","Image","src","icon","Component","injectIntl","DashDriver","Promise","resolve","reject","navigator","bluetooth","requestDevice","filters","services","then","device","gatt","connect","server","getPrimaryService","service","getCharacteristic","characteristic","commandCharacteristic","catch","error","bytes","waitTimeMs","writeValue","Uint8Array","setTimeout","sendCommand","DeviceConnectControl","onClickConnect","connectionStatus","expandProgram","program","length","fill","slice","push","ProgramBlockEditor","handleClickAdd","toggleAction","handleClickDelete","handleClickStep","e","index","parseInt","currentTarget","dataset","stepnumber","selectedAction","type","action","command","splice","ProgramUtils","onSelectAction","commandToTrim","pop","actionIsSelected","programStepNumber","key","data-stepnumber","addIsSelected","deleteIsSelected","style","stroke","noneAtEnd","programBlocks","stepNumber","makeProgramBlock","i","minVisibleSteps","Row","Col","TextSyntax","text","trim","split","join","idCounter","ProgramTextEditor","handleChange","setState","value","handleBlur","syntax","read","state","textareaId","prefix","Utils","programVer","print","htmlFor","onBlur","EditorContainer","width","mode","Interpreter","commands","programCounter","memory","isRunning","namespace","handler","commandNamespaces","continueRun","atEnd","step","doCommand","console","log","name","message","handlers","lookUpCommandHandlers","Error","callCommandHandlers","promises","all","MicMonitor","reactMicLoaded","window","AudioContext","webkitAudioContext","reactMicModule","createElement","ReactMic","record","enabled","strokeColor","backgroundColor","SoundexTable","patterns","inputWord","maybeNumberInput","afterSoundex","soundex","entry","pattern","test","word","wrap","start","stop","val","Math","floor","TurtleGraphics","location","x","y","directionDegrees","path","distance","directionRadians","PI","xOffset","sin","yOffset","cos","newX","newY","newPathSegment","x1","y1","x2","y2","concat","amountDegrees","C2lcMath","turtleTransform","role","xmlns","viewBox","pathSegment","transform","points","WebSpeechEventProcessor","soundexTable","numWordsSinceFinal","event","recognizedWords","numWordsThisEvent","resultIndex","results","result","transcript","lookupWord","isFinal","WebSpeechInput","onWord","handleResult","words","eventProcessor","processEvent","speechRecognitionInstance","webkitSpeechRecognition","lang","continuous","interimResults","maxAlternatives","onresult","j","alternative","confidence","localizeProperties","fn","App","handleChangeLanguage","setStateSettings","language","handleChangeProgram","setProgram","handleClickRun","turtleGraphicsRef","current","clear","home","interpreter","run","handleClickConnectDash","dashConnectionStatus","dashDriver","handleModeChange","target","editorMode","handleSpeechCommand","handleToggleSpeech","speechRecognitionOn","checked","handleAppendToProgram","handleCommandFromCommandPalette","handleSelectAction","appContext","bluetoothApiIsAvailable","speechRecognitionApiIsAvailable","settings","dashSupport","addCommandHandler","forward","turnLeft","turnRight","createRef","webSpeechInput","Object","assign","locale","messages","Dropdown","Toggle","Menu","ref","playIcon","arrowUp","getSelectedCommandName","arrowLeft","arrowRight","Form","Check","label","disabled","prevProps","prevState","bind","left","right","Boolean","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a51b2fd.chunk.js","sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport { Nav, Tab } from 'react-bootstrap';\n\ntype CommandPaletteProps = {\n    children: React.Node,\n    defaultActiveKey: string,\n    id: string\n};\n\nexport default class CommandPalette extends React.Component<CommandPaletteProps, {}> {\n    render() {\n        return (\n            <Tab.Container id={this.props.id} defaultActiveKey={this.props.defaultActiveKey}>\n                <Nav variant='tabs'>\n                    {React.Children.map(this.props.children, (category)=>{\n                        return (\n                            <Nav.Item>\n                                <Nav.Link eventKey={category.props.eventKey}>{category.props.title}</Nav.Link>\n                            </Nav.Item>\n                        );\n                    })}\n                </Nav>\n                <Tab.Content>\n                    {this.props.children}\n                </Tab.Content>\n            </Tab.Container>\n        );\n    }\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Tab } from 'react-bootstrap';\n\ntype CommandPaletteCategoryProps = {\n    children?: React.Node,\n    eventKey: string,\n    title: string\n};\n\nexport default class CommandPaletteCategory extends React.Component<CommandPaletteCategoryProps, {}> {\n    render() {\n        return (\n            <Tab.Pane eventKey={this.props.eventKey} title={this.props.title}>\n                {this.props.children}\n            </Tab.Pane>\n        );\n    }\n};\n","// @flow\n\nimport React from 'react';\nimport { Button, Image } from 'react-bootstrap';\nimport {injectIntl} from 'react-intl';\nimport './CommandPaletteCommand.css';\n\ntype CommandPaletteCommandProps = {\n    commandName: string,\n    icon: any,\n    intl: any,\n    selectedCommandName: ?string,\n    onChange: (commandName: ?string) => void\n};\n\nclass CommandPaletteCommand extends React.Component<CommandPaletteCommandProps, {}> {\n    handleClick = () => {\n        this.props.onChange(\n            this.props.commandName === this.props.selectedCommandName ? null : this.props.commandName\n        );\n    };\n\n    render() {\n        return (\n            <Button\n                className='CommandPaletteCommand__command-button'\n                variant={this.props.commandName === this.props.selectedCommandName ? 'outline-primary' : 'light'}\n                aria-label={this.props.intl.formatMessage({ id: `CommandPaletteCommand.${this.props.commandName}`})}\n                aria-pressed={this.props.commandName === this.props.selectedCommandName ? 'true' : 'false'}\n                onClick={this.handleClick}>\n                <Image src={this.props.icon}/>\n            </Button>\n        )\n    }\n}\n\nexport default injectIntl(CommandPaletteCommand);\n","// @flow\n\nconst dashServiceUuid = 'af237777-879d-6186-1f49-deca0e85d9c1';\nconst dashCommandCharacteristicUuid = 'af230002-879d-6186-1f49-deca0e85d9c1';\n\nexport default class DashDriver {\n    commandCharacteristic: any;\n\n    connect(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            (navigator: any).bluetooth.requestDevice({\n                filters: [{ services: [dashServiceUuid] }]\n            }).then((device) => {\n                return device.gatt.connect();\n            }).then((server) => {\n                return server.getPrimaryService(dashServiceUuid);\n            }).then((service) => {\n                return service.getCharacteristic(dashCommandCharacteristicUuid);\n            }).then((characteristic) => {\n                this.commandCharacteristic = characteristic;\n                resolve();\n            }).catch((error) => {\n                reject(error);\n            });\n        });\n    }\n\n    sendCommand(bytes: Array<number>, waitTimeMs: number): Promise<void> {\n        // TODO: Use feedback from Dash to know when the command has finished,\n        //       rather than after a set amount of time\n        return new Promise((resolve, reject) => {\n            this.commandCharacteristic.writeValue(new Uint8Array(bytes));\n            setTimeout(() => {\n                resolve();\n            }, waitTimeMs);\n        });\n    }\n\n    forward(): Promise<void> {\n        return this.sendCommand(\n            [0x23, 0xC8, 0x00, 0x00, 0x03, 0xE8, 0x00, 0x00, 0x80],\n            1900\n        );\n    }\n\n    left(): Promise<void> {\n        return this.sendCommand(\n            [0x23, 0x00, 0x00, 0x9D, 0x03, 0xE8, 0x00, 0x00, 0x80],\n            1900\n        );\n    }\n\n    right(): Promise<void> {\n        return this.sendCommand(\n            [0x23, 0x00, 0x00, 0x63, 0x03, 0xE8, 0xC0, 0xC0, 0x80],\n            1900\n        );\n    }\n}\n","// @flow\n\nimport * as React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport type {DeviceConnectionStatus} from './types';\n\ntype DeviceConnectControlProps = {\n    children: React.Element<any>, // Button contents\n    onClickConnect: () => void,\n    connectionStatus: DeviceConnectionStatus\n};\n\nexport default class DeviceConnectControl extends React.Component<DeviceConnectControlProps, {}> {\n    render() {\n        return (\n            <div>\n                <button onClick={this.props.onClickConnect}>{this.props.children}</button>\n                <FormattedMessage id={`DeviceConnectControl.${this.props.connectionStatus}`} />\n            </div>\n        );\n    }\n}\n","// @flow\n\nimport type {Program} from './types';\n\nfunction deleteStep(program: Program, index: number): Program {\n    // Make a shallow copy before we modify it with splice()\n    program = program.slice();\n    program.splice(index, 1);\n    return program;\n};\n\nfunction expandProgram(program: Program, length: number, fill: string): Program {\n    // Make a shallow copy before we add to the program\n    program = program.slice();\n    while (program.length < length) {\n        program.push(fill);\n    }\n    return program;\n};\n\nfunction insert(program: Program, index: number, command: string, fill: string): Program {\n    program = expandProgram(program, index, fill);\n    program.splice(index, 0, command);\n    return program;\n};\n\nfunction overwrite(program: Program, index: number, command: string, fill: string): Program {\n    program = expandProgram(program, index + 1, fill);\n    program[index] = command;\n    return program;\n};\n\nfunction trimEnd(program: Program, commandToTrim: string): Program {\n    // Make a shallow copy before we trim\n    program = program.slice();\n    while ((program.length > 0)\n            && (program[program.length - 1] === commandToTrim)) {\n        program.pop();\n    }\n    return program;\n};\n\nexport {\n    deleteStep,\n    expandProgram,\n    insert,\n    overwrite,\n    trimEnd\n};\n","// @flow\n\nimport { Button, Col, Image, Row } from 'react-bootstrap';\nimport {injectIntl} from 'react-intl';\nimport * as ProgramUtils from './ProgramUtils';\nimport type {Program, SelectedAction} from './types';\nimport React from 'react';\nimport { ReactComponent as ArrowLeft } from 'material-design-icons/navigation/svg/production/ic_arrow_back_48px.svg';\nimport { ReactComponent as ArrowRight } from 'material-design-icons/navigation/svg/production/ic_arrow_forward_48px.svg';\nimport { ReactComponent as ArrowUp } from 'material-design-icons/navigation/svg/production/ic_arrow_upward_48px.svg';\nimport { ReactComponent as AddIcon } from 'material-design-icons/content/svg/production/ic_add_24px.svg';\nimport { ReactComponent as DeleteIcon } from 'material-design-icons/content/svg/production/ic_clear_24px.svg';\nimport { ReactComponent as EmptyBlockIcon } from 'material-design-icons/toggle/svg/production/ic_check_box_outline_blank_48px.svg';\nimport './ProgramBlockEditor.css';\n\ntype ProgramBlockEditorProps = {\n    intl: any,\n    minVisibleSteps: number,\n    program: Program,\n    selectedAction: SelectedAction,\n    onSelectAction: (selectedAction: SelectedAction) => void,\n    onChange: (Program) => void\n};\n\nclass ProgramBlockEditor extends React.Component<ProgramBlockEditorProps, {}> {\n    toggleAction(action: 'add' | 'delete') {\n        if (this.props.selectedAction\n                && this.props.selectedAction.type === 'editorAction'\n                && this.props.selectedAction.action === action) {\n            this.props.onSelectAction(null);\n        } else {\n            this.props.onSelectAction({\n                type: 'editorAction',\n                action: action\n            });\n        }\n    };\n\n    actionIsSelected(action: string) {\n        return (this.props.selectedAction\n            && this.props.selectedAction.type === 'editorAction'\n            && this.props.selectedAction.action === action);\n    }\n\n    addIsSelected() {\n        return this.actionIsSelected('add');\n    }\n\n    deleteIsSelected() {\n        return this.actionIsSelected('delete');\n    }\n\n    handleClickAdd = () => {\n        this.toggleAction('add');\n    };\n\n    handleClickDelete = () => {\n        this.toggleAction('delete');\n    };\n\n    handleClickStep = (e: SyntheticEvent<HTMLButtonElement>) => {\n        const index = parseInt(e.currentTarget.dataset.stepnumber, 10);\n\n        if (this.props.selectedAction && this.props.selectedAction.type === 'editorAction') {\n            if (this.props.selectedAction.action === 'add') {\n                this.props.onChange(ProgramUtils.insert(this.props.program,\n                    index, 'none', 'none'));\n                this.props.onSelectAction(null);\n            } else if (this.props.selectedAction.action === 'delete') {\n                this.props.onChange(ProgramUtils.trimEnd(\n                    ProgramUtils.deleteStep(this.props.program, index),\n                    'none'));\n                this.props.onSelectAction(null);\n            }\n        } else if (this.props.selectedAction && this.props.selectedAction.type === 'command'){\n            this.props.onChange(ProgramUtils.overwrite(this.props.program,\n                    index, this.props.selectedAction.commandName, 'none'));\n            this.props.onSelectAction(null);\n        }\n    };\n\n    makeProgramBlock(programStepNumber: number, command: string) {\n        switch(command) {\n            case 'forward':\n                return (\n                    <Button\n                        key={`${programStepNumber}-forward`}\n                        data-stepnumber={programStepNumber}\n                        className='ProgramBlockEditor__program-block'\n                        aria-label={\n                            this.addIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandForward'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnAdd'})}` :\n                            this.deleteIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandForward'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnDelete'})}` :\n                            this.props.intl.formatMessage({id:'ProgramBlockEditor.commandForward'}, {index: programStepNumber + 1})\n                        }\n                        onClick={this.handleClickStep}>\n                        <ArrowUp/>\n                    </Button>\n                );\n            case 'left':\n                return (\n                    <Button\n                        key={`${programStepNumber}-left`}\n                        data-stepnumber={programStepNumber}\n                        className='ProgramBlockEditor__program-block'\n                        aria-label={\n                            this.addIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandLeft'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnAdd'})}` :\n                            this.deleteIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandLeft'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnDelete'})}` :\n                            this.props.intl.formatMessage({id:'ProgramBlockEditor.commandLeft'}, {index: programStepNumber + 1})\n                        }\n                        onClick={this.handleClickStep}>\n                        <ArrowLeft/>\n                    </Button>\n                );\n            case 'right':\n                return (\n                    <Button\n                        key={`${programStepNumber}-right`}\n                        data-stepnumber={programStepNumber}\n                        className='ProgramBlockEditor__program-block'\n                        aria-label={\n                            this.addIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandRight'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnAdd'})}` :\n                            this.deleteIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandRight'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnDelete'})}` :\n                            this.props.intl.formatMessage({id:'ProgramBlockEditor.commandRight'}, {index: programStepNumber + 1})\n                        }\n                        onClick={this.handleClickStep}>\n                        <ArrowRight/>\n                    </Button>\n                );\n            case 'none':\n                return (\n                    <Button\n                        key={`${programStepNumber}-none`}\n                        data-stepnumber={programStepNumber}\n                        className='ProgramBlockEditor__program-block'\n                        aria-label={\n                            this.addIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandNone'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnAdd'})}` :\n                            this.deleteIsSelected() ?\n                            `${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandNone'}, {index: programStepNumber + 1})}. ${this.props.intl.formatMessage({id:'ProgramBlockEditor.commandOnDelete'})}` :\n                            this.props.intl.formatMessage({id:'ProgramBlockEditor.commandNone'}, {index: programStepNumber + 1})\n                        }\n                        variant='light'\n                        onClick={this.handleClickStep}>\n                        <EmptyBlockIcon style={{ stroke: '#888', fill: '#888' }}/>\n                    </Button>\n                );\n            default:\n                return (\n                    <div key={`${programStepNumber}-unknown`}/>\n                );\n        }\n    }\n\n    render() {\n        var noneAtEnd = this.props.program[this.props.program.length - 1] === 'none';\n\n        const programBlocks = this.props.program.map((command, stepNumber) => {\n            return this.makeProgramBlock(stepNumber, command);\n        });\n\n        // Ensure that we have at least props.minVisibleSteps\n        for (var i = this.props.program.length; i < this.props.minVisibleSteps; i++) {\n            programBlocks.push(this.makeProgramBlock(i, 'none'));\n            noneAtEnd = true;\n        }\n\n        // Ensure that the last block is 'none'\n        if (!noneAtEnd) {\n            programBlocks.push(this.makeProgramBlock(programBlocks.length, 'none'));\n        }\n\n        return (\n            <div className='ProgramBlockEditor__container'>\n                <Row>\n                    <Col className='ProgramBlockEditor__editor-actions'>\n                        <Button\n                            key='addButton'\n                            className='ProgramBlockEditor__editor-action-button'\n                            aria-pressed={this.addIsSelected() ? 'true' : 'false'}\n                            aria-label={this.props.intl.formatMessage({id:'ProgramBlockEditor.editorAction.add'})}\n                            variant={this.addIsSelected() ? 'outline-primary' : 'light'}\n                            onClick={this.handleClickAdd}>\n                            <AddIcon/>\n                        </Button>\n                        <Button\n                            key='deleteButton'\n                            className='ProgramBlockEditor__editor-action-button'\n                            aria-pressed={this.deleteIsSelected() ? 'true' : 'false'}\n                            aria-label={this.props.intl.formatMessage({id:'ProgramBlockEditor.editorAction.delete'})}\n                            variant={this.deleteIsSelected() ? 'outline-primary' : 'light'}\n                            onClick={this.handleClickDelete}>\n                            <DeleteIcon/>\n                        </Button>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        {programBlocks}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(ProgramBlockEditor);\n","// @flow\n\nimport type {Program} from './types';\n\nexport default class TextSyntax {\n    read(text: string): Program {\n        if (text.trim().length === 0) {\n            return [];\n        }\n        return text.trim().split(/\\s+/);\n    }\n\n    print(program: Program): string {\n        return program.join(' ');\n    }\n}\n","// @flow\n\nlet idCounter: number = 0;\n\nfunction generateId(prefix: string): string {\n    const id = `${prefix}-${idCounter}`;\n    idCounter += 1;\n    return id;\n}\n\nexport { generateId };\n","// @flow\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport TextSyntax from './TextSyntax';\nimport * as Utils from './Utils';\nimport type {Program} from './types';\n\ntype ProgramTextEditorProps = {\n    program: Program,\n    programVer: number,\n    syntax: TextSyntax,\n    onChange: (Program) => void\n};\n\ntype ProgramTextEditorState = {\n    programVer: number,\n    text: string\n};\n\nexport default class ProgramTextEditor extends React.Component<ProgramTextEditorProps, ProgramTextEditorState> {\n    // This is a 'uncontrolled component' that maintains its own local version\n    // of the program text. The changes are sent outwards (to the\n    // props.onChange handler) at blur. And getDerivedStateFromProps() is used\n    // with an explicit version number to trigger this component to update\n    // its state to reflect changes from outside.\n    // See: https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html\n\n    textareaId: string;\n\n    constructor(props: ProgramTextEditorProps) {\n        super(props);\n        this.textareaId = Utils.generateId('texteditor');\n        this.state = {\n            programVer: props.programVer,\n            text: props.syntax.print(props.program)\n        };\n    }\n\n    static getDerivedStateFromProps(props: ProgramTextEditorProps, state: ProgramTextEditorState) {\n        if (props.programVer !== state.programVer) {\n            return {\n                programVer: props.programVer,\n                text: props.syntax.print(props.program)\n            };\n        } else {\n            return null;\n        }\n    }\n\n    handleChange = (e: SyntheticEvent<HTMLTextAreaElement>) => {\n        // Update the local program text state\n        this.setState({\n            text: e.currentTarget.value\n        });\n    };\n\n    handleBlur = () => {\n        // Call the props.onChange handler at blur.\n        // We could implement a much more sophisticated strategy here, such as\n        // checking if the program is valid at each edit (textarea.onChange)\n        // and call the onChange handler if the program has changed (and it is\n        // valid).\n        this.props.onChange(this.props.syntax.read(this.state.text));\n    };\n\n    render() {\n        return (\n            <div>\n                <label htmlFor={this.textareaId}>\n                    <FormattedMessage id='ProgramTextEditor.programLabel' />\n                </label>\n                <textarea\n                    id={this.textareaId}\n                    value={this.state.text}\n                    onChange={this.handleChange}\n                    onBlur={this.handleBlur} />\n            </div>\n        );\n    }\n}\n","// @flow\n\nimport ProgramBlockEditor from './ProgramBlockEditor';\nimport ProgramTextEditor from './ProgramTextEditor';\nimport React from 'react';\nimport TextSyntax from './TextSyntax';\nimport type {EditorMode, Program, SelectedAction} from './types';\n\ntype EditorContainerProps = {\n    program: Program,\n    programVer: number,\n    syntax: TextSyntax,\n    mode: EditorMode,\n    selectedAction: SelectedAction,\n    onSelectAction: (action: SelectedAction) => void,\n    onChange: (Program) => void\n};\n\nexport default class EditorContainer extends React.Component<EditorContainerProps, {}> {\n    render() {\n        return (\n            <div style={{width: '100%'}}>\n                {this.props.mode === 'text' ? (\n                    <ProgramTextEditor\n                        program={this.props.program}\n                        programVer={this.props.programVer}\n                        syntax={this.props.syntax}\n                        onChange={this.props.onChange} />\n                 ) : (\n                    <ProgramBlockEditor\n                        minVisibleSteps={6}\n                        program={this.props.program}\n                        selectedAction={this.props.selectedAction}\n                        onSelectAction={this.props.onSelectAction}\n                        onChange={this.props.onChange} />\n                )}\n            </div>\n        );\n    }\n}\n","// @flow\n\nimport type {Program} from './types';\n\n/* eslint-disable no-use-before-define */\nexport type CommandHandler = { (Interpreter): Promise<void> };\n/* eslint-enable no-use-before-define */\n\n// TODO: I don't think that Interpreter having memory is quite the right\n//       factoring. But this will evolve. Maybe something like a parameterized\n//       Project<T> that contains program and memory.\n\nexport default class Interpreter {\n    commands: { [command: string]: { [namespace: string]: CommandHandler } };\n    program: Program;\n    programCounter: number;\n    memory: { [string]: any };\n    isRunning: boolean;\n\n    constructor() {\n        this.commands = {};\n        this.program = [];\n        this.programCounter = 0;\n        this.memory = {};\n        this.isRunning = false;\n    }\n\n    addCommandHandler(command: string, namespace: string, handler: CommandHandler) {\n        let commandNamespaces = this.commands[command];\n        if (!commandNamespaces) {\n            commandNamespaces = {};\n            this.commands[command] = commandNamespaces;\n        }\n        commandNamespaces[namespace] = handler;\n    }\n\n    setProgram(program: Program): void {\n        this.program = program;\n        this.programCounter = 0;\n    }\n\n    run(program: Program): void {\n        this.program = program;\n        this.programCounter = 0;\n        this.isRunning = true;\n        this.continueRun();\n    }\n\n    continueRun(): void {\n        if (this.isRunning) {\n            if (this.atEnd()) {\n                this.isRunning = false;\n            } else {\n                this.step().then(() => {\n                    this.continueRun();\n                });\n            }\n        }\n    }\n\n    atEnd(): boolean {\n        return this.programCounter >= this.program.length;\n    }\n\n    step(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (this.atEnd()) {\n                // We're at the end, nothing to do\n                resolve();\n            } else {\n                this.doCommand(this.program[this.programCounter]).then(() => {\n                    // When the command has completed, increment\n                    // the programCounter and resolve the step Promise\n                    this.programCounter = this.programCounter + 1;\n                    resolve();\n                }, (error) => {\n                    console.log(error.name);\n                    console.log(error.message);\n                    reject(error);\n                });\n            }\n        });\n    }\n\n    doCommand(command: string): Promise<any> {\n        const handlers = this.lookUpCommandHandlers(command);\n        if (handlers.length === 0) {\n            return Promise.reject(new Error(`Unknown command: ${command}`));\n        } else {\n            return this.callCommandHandlers(handlers);\n        }\n    }\n\n    callCommandHandlers(handlers: Array<CommandHandler>): Promise<any> {\n        const promises = [];\n        for (const handler of handlers) {\n            promises.push(handler(this));\n        }\n        return Promise.all(promises);\n    };\n\n    lookUpCommandHandlers(command: string): Array<CommandHandler> {\n        const commandNamespaces = this.commands[command];\n        if (commandNamespaces) {\n            const handlers = [];\n            for (const namespace in commandNamespaces) {\n                handlers.push(commandNamespaces[namespace]);\n            }\n            return handlers;\n        } else {\n            return [];\n        }\n    }\n}\n","// @flow\n\nimport React from 'react';\n\n// This component is a thin wrapper over the ReactMic component. It provides\n// dynamic loading of the 'react-mic' module to facilitate importing of this\n// component module in environments that do not provide the Web AudioContext\n// API. This is necessary as the 'react-mic' module attempts to construct an\n// AudioContext instance at import.\n\ntype MicMonitorProps = {\n    enabled: boolean\n};\n\ntype MicMonitorState = {\n    reactMicLoaded: boolean\n};\n\nexport default class MicMonitor extends React.Component<MicMonitorProps, MicMonitorState> {\n    reactMicModule: any;\n\n    constructor(props: MicMonitorProps) {\n        super(props);\n        this.state = {\n            reactMicLoaded: false\n        };\n        // Import 'react-mic' only if the AudioContext API is available\n        if (window.AudioContext || window.webkitAudioContext) {\n            import('react-mic').then((reactMicModule) => {\n                this.reactMicModule = reactMicModule;\n                this.setState({\n                    reactMicLoaded: true\n                });\n            });\n        }\n    }\n\n    render() {\n        if (this.state.reactMicLoaded) {\n            return React.createElement(this.reactMicModule.ReactMic, {\n                record: this.props.enabled,\n                strokeColor: '#FFFFFF',\n                backgroundColor: '#444444'\n            });\n        } else {\n            return <span></span>;\n        }\n    }\n}\n","// @flow\n\nimport soundex from 'soundex';\n\nexport type SoundexPatterns = Array<{\n    pattern: Object,\n    word: string\n}>;\n\nexport default class SoundexTable {\n    patterns: SoundexPatterns;\n\n    constructor(patterns: SoundexPatterns) {\n        this.patterns = patterns;\n    }\n\n    lookupWord(inputWord: string): ?string {\n        const maybeNumberInput = parseInt(inputWord);\n        if (maybeNumberInput || maybeNumberInput === 0) {\n            switch(maybeNumberInput) {\n                case 0:\n                    inputWord = 'zero';\n                    break;\n                case 1:\n                    inputWord = 'one';\n                    break;\n                case 2:\n                    inputWord = 'two';\n                    break;\n                case 3:\n                    inputWord = 'three';\n                    break;\n                case 4:\n                    inputWord = 'four';\n                    break;\n                case 5:\n                    inputWord = 'five';\n                    break;\n                case 6:\n                    inputWord = 'six';\n                    break;\n                case 7:\n                    inputWord = 'seven';\n                    break;\n                case 8:\n                    inputWord = 'eight';\n                    break;\n                case 9:\n                    inputWord = 'nine';\n                    break;\n                case 10:\n                    inputWord = 'ten';\n                    break;\n                default:\n                    break;\n            }\n        }\n        const afterSoundex = soundex(inputWord);\n        for (const entry of this.patterns) {\n            if (entry.pattern.test(afterSoundex)) {\n                return entry.word;\n            }\n        }\n        return undefined;\n    }\n};\n","// @flow\n\nfunction degrees2radians(degrees: number): number {\n    return degrees * Math.PI / 180;\n}\n\nfunction wrap(start: number, stop: number, val: number): number {\n    return val - (Math.floor((val - start) / (stop - start)) * (stop - start));\n}\n\nexport { degrees2radians, wrap };\n","// @flow\n\nimport React from 'react';\nimport * as C2lcMath from './C2lcMath';\nimport './TurtleGraphics.css';\n\ntype TurtleGraphicsState = {\n    location: {\n        x: number,\n        y: number\n    },\n    directionDegrees: number,\n    path: Array<{\n        x1: number,\n        y1: number,\n        x2: number,\n        y2: number\n    }>\n};\n\nexport default class TurtleGraphics extends React.Component<{}, TurtleGraphicsState> {\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            location: {\n                x: 0,\n                y: 0\n            },\n            directionDegrees: 0,\n            path: []\n        }\n    }\n\n    forward(distance: number): Promise<void> {\n        this.setState((state) => {\n            const directionRadians = C2lcMath.degrees2radians(state.directionDegrees);\n            const xOffset = Math.sin(directionRadians) * distance;\n            const yOffset = Math.cos(directionRadians) * distance;\n\n            const newX = state.location.x + xOffset;\n            const newY = state.location.y - yOffset;\n            const newPathSegment = {\n                x1: state.location.x,\n                y1: state.location.y,\n                x2: newX,\n                y2: newY\n            };\n\n            return {\n                location: {\n                    x: newX,\n                    y: newY\n                },\n                path: state.path.concat([newPathSegment])\n            }\n        });\n\n        return Promise.resolve();\n    }\n\n    turnLeft(amountDegrees: number): Promise<void> {\n        this.setState((state) => {\n            return {\n                directionDegrees: C2lcMath.wrap(0, 360,\n                    state.directionDegrees - amountDegrees)\n            };\n        });\n\n        return Promise.resolve();\n    }\n\n    turnRight(amountDegrees: number): Promise<void> {\n        this.setState((state) => {\n            return {\n                directionDegrees: C2lcMath.wrap(0, 360,\n                    state.directionDegrees + amountDegrees)\n            };\n        });\n\n        return Promise.resolve();\n    }\n\n    home(): void {\n        this.setState({\n            location: {\n                x: 0,\n                y: 0\n            },\n            directionDegrees: 0\n        });\n    }\n\n    clear(): void {\n        this.setState({\n            path: []\n        });\n    }\n\n    render() {\n        const turtleTransform = `translate(${this.state.location.x} ${this.state.location.y}) rotate(${this.state.directionDegrees} 0 0)`;\n\n        return (\n            <div>\n                <span\n                    className='TurtleGraphics__drawing-area'\n                    role='img'\n                    aria-label='Drawing area'>\n                    <svg\n                        className='TurtleGraphics__svg'\n                        xmlns='http://www.w3.org/2000/svg'\n                        viewBox='-100 -100 200 200'>\n                        {this.state.path.map((pathSegment, i) => {\n                            return <line\n                                x1={pathSegment.x1}\n                                y1={pathSegment.y1}\n                                x2={pathSegment.x2}\n                                y2={pathSegment.y2}\n                                key={i} />\n                        })}\n                        <polygon\n                            className='TurtleGraphics__turtle'\n                            transform={turtleTransform}\n                            points='-6 4 6 4 0 -9'/>\n                    </svg>\n                </span>\n            </div>\n        );\n    }\n}\n","// @flow\n\nimport SoundexTable from './SoundexTable';\n\nexport default class WebSpeechEventProcessor {\n    soundexTable: SoundexTable;\n    numWordsSinceFinal: number;\n\n    constructor(soundexTable: SoundexTable) {\n        this.soundexTable = soundexTable;\n        this.numWordsSinceFinal = 0;\n    }\n\n    processEvent(event: any): Array<string> {\n        const recognizedWords = [];\n        let numWordsThisEvent = 0;\n        // Loop through results, starting at resultIndex\n        for (let i = event.resultIndex; i < event.results.length; ++i) {\n            const result = event.results[i];\n            if (result.length > 0) {\n                // Process the first alternative in each result\n                for (const word of result[0].transcript.trim().split(/\\s+/)) {\n                    // If this result contains words that we haven't seen yet\n                    // (words since the last final), then run them through\n                    // Soundex and add if they are words that we recognize\n                    ++numWordsThisEvent;\n                    if (numWordsThisEvent > this.numWordsSinceFinal) {\n                        this.numWordsSinceFinal = this.numWordsSinceFinal + 1;\n                        const afterSoundex = this.soundexTable.lookupWord(word);\n                        if (afterSoundex) {\n                            recognizedWords.push(afterSoundex);\n                        }\n                    }\n                }\n            }\n            if (result.isFinal) {\n                this.numWordsSinceFinal = 0;\n            }\n        }\n        return recognizedWords;\n    }\n\n};\n","// @flow\n\nimport SoundexTable from './SoundexTable';\nimport WebSpeechEventProcessor from './WebSpeechEventProcessor';\n\ntype OnWordCallback = { (string): void };\n\nexport default class WebSpeechInput {\n    onWord: OnWordCallback;\n    speechRecognitionInstance: any;\n    eventProcessor: WebSpeechEventProcessor;\n\n    constructor(soundexTable: SoundexTable, onWord: OnWordCallback) {\n        this.onWord = onWord;\n\n        this.speechRecognitionInstance = new window.webkitSpeechRecognition();\n        this.speechRecognitionInstance.lang = 'en-CA';\n        this.speechRecognitionInstance.continuous = true;\n        this.speechRecognitionInstance.interimResults = true;\n        this.speechRecognitionInstance.maxAlternatives = 1;\n        this.speechRecognitionInstance.onresult = this.handleResult;\n\n        this.eventProcessor = new WebSpeechEventProcessor(soundexTable);\n    }\n\n    start() {\n        this.speechRecognitionInstance.start();\n    }\n\n    stop() {\n        this.speechRecognitionInstance.stop();\n    }\n\n    handleResult = (event: any) => {\n        // this.logSpeechRecognitionEvent(event);\n        const words = this.eventProcessor.processEvent(event);\n        for (const word of words) {\n            this.onWord(word);\n        }\n    };\n\n    logSpeechRecognitionEvent(event: any) {\n        console.log('****');\n        console.log(`resultIndex: ${event.resultIndex}`);\n        console.log(`resultsLength: ${event.results.length}`);\n        for (let i = 0; i < event.results.length; ++i) {\n            const result = event.results[i];\n            console.log(`results[${i}].length: ${result.length}`);\n            console.log(`results[${i}].isFinal: ${result.isFinal}`);\n            for (let j = 0; j < result.length; ++j) {\n                const alternative = result[j];\n                console.log(`alternative ${j}.transcript: ${alternative.transcript}`);\n                console.log(`alternative ${j}.confidence: ${alternative.confidence}`);\n            }\n        }\n    }\n};\n","// @flow\n\nimport React from 'react';\nimport { injectIntl, IntlProvider, FormattedMessage } from 'react-intl';\nimport { Col, Container, Dropdown, Form, Image, Row } from 'react-bootstrap';\nimport CommandPalette from './CommandPalette';\nimport CommandPaletteCategory from './CommandPaletteCategory';\nimport CommandPaletteCommand from './CommandPaletteCommand';\nimport DashDriver from './DashDriver';\nimport DeviceConnectControl from './DeviceConnectControl';\nimport EditorContainer from './EditorContainer';\nimport * as FeatureDetection from './FeatureDetection';\nimport Interpreter from './Interpreter';\nimport MicMonitor from './MicMonitor';\nimport SoundexTable from './SoundexTable';\nimport TextSyntax from './TextSyntax';\nimport TurtleGraphics from './TurtleGraphics';\nimport WebSpeechInput from './WebSpeechInput';\nimport type {DeviceConnectionStatus, EditorMode, Program, SelectedAction} from './types';\nimport messages from './messages.json';\nimport arrowLeft from 'material-design-icons/navigation/svg/production/ic_arrow_back_48px.svg';\nimport arrowRight from 'material-design-icons/navigation/svg/production/ic_arrow_forward_48px.svg';\nimport arrowUp from 'material-design-icons/navigation/svg/production/ic_arrow_upward_48px.svg';\nimport playIcon from 'material-design-icons/av/svg/production/ic_play_arrow_48px.svg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst localizeProperties = (fn) => React.createElement(injectIntl(({ intl }) => fn(intl)));\n\ntype AppContext = {\n    bluetoothApiIsAvailable: boolean,\n    speechRecognitionApiIsAvailable: boolean\n};\n\ntype AppSettings = {\n    dashSupport: boolean,\n    editorMode: EditorMode,\n    language: string\n}\n\ntype AppState = {\n    program: Program,\n    programVer: number,\n    settings: AppSettings,\n    dashConnectionStatus: DeviceConnectionStatus,\n    speechRecognitionOn: boolean,\n    selectedAction: SelectedAction\n};\n\nexport default class App extends React.Component<{}, AppState> {\n    appContext: AppContext;\n    dashDriver: DashDriver;\n    interpreter: Interpreter;\n    syntax: TextSyntax;\n    turtleGraphicsRef: { current: null | TurtleGraphics };\n    webSpeechInput: WebSpeechInput;\n\n    constructor(props: {}) {\n        super(props);\n\n        this.appContext = {\n            bluetoothApiIsAvailable: FeatureDetection.bluetoothApiIsAvailable(),\n            speechRecognitionApiIsAvailable: FeatureDetection.speechRecognitionApiIsAvailable()\n        };\n\n        this.state = {\n            program: [\n                'forward',\n                'left',\n                'forward',\n                'left',\n                'forward',\n                'left',\n                'forward',\n                'left'\n            ],\n            programVer: 1,\n            settings: {\n                dashSupport: this.appContext.bluetoothApiIsAvailable,\n                editorMode: 'block',\n                language: 'en'\n            },\n            dashConnectionStatus: 'notConnected',\n            speechRecognitionOn: false,\n            selectedAction: null\n        };\n\n        this.interpreter = new Interpreter();\n        this.interpreter.addCommandHandler(\n            'forward',\n            'turtleGraphics',\n            () => {\n                if (this.turtleGraphicsRef.current !== null) {\n                    return this.turtleGraphicsRef.current.forward(40);\n                } else {\n                    return Promise.reject();\n                }\n            }\n        );\n        this.interpreter.addCommandHandler(\n            'left',\n            'turtleGraphics',\n            () => {\n                if (this.turtleGraphicsRef.current !== null) {\n                    return this.turtleGraphicsRef.current.turnLeft(90);\n                } else {\n                    return Promise.reject();\n                }\n            }\n        );\n        this.interpreter.addCommandHandler(\n            'right',\n            'turtleGraphics',\n            () => {\n                if (this.turtleGraphicsRef.current !== null) {\n                    return this.turtleGraphicsRef.current.turnRight(90);\n                } else {\n                    return Promise.reject();\n                }\n            }\n        );\n        this.interpreter.addCommandHandler(\n            'none',\n            'noneHandler',\n            () => {\n                return Promise.resolve();\n            }\n        );\n\n        this.dashDriver = new DashDriver();\n        this.syntax = new TextSyntax();\n        this.turtleGraphicsRef = React.createRef<TurtleGraphics>();\n\n        if (this.appContext.speechRecognitionApiIsAvailable) {\n            const soundexTable = new SoundexTable([\n                { pattern: /F6../, word: 'forward' },\n                { pattern: /O6../, word: 'forward' },\n                { pattern: /L1../, word: 'left' },\n                { pattern: /L2../, word: 'left' },\n                { pattern: /L3../, word: 'left' },\n                { pattern: /L.3./, word: 'left' },\n                { pattern: /L..3/, word: 'left' },\n                { pattern: /R3../, word: 'right' },\n                { pattern: /R.3./, word: 'right' },\n                { pattern: /R..3/, word: 'right' }\n            ]);\n\n            this.webSpeechInput = new WebSpeechInput(\n                soundexTable,\n                this.handleSpeechCommand);\n        }\n    }\n\n    setProgram(program: Program) {\n        this.setState((state) => {\n            return {\n                program: program,\n                programVer: state.programVer + 1\n            }\n        });\n    }\n\n    setStateSettings(settings: $Shape<AppSettings>) {\n        this.setState((state) => {\n            return {\n                settings: Object.assign({}, state.settings, settings)\n            }\n        });\n    }\n\n    getSelectedCommandName() {\n        if (this.state.selectedAction !== null\n                && this.state.selectedAction.type === 'command') {\n            return this.state.selectedAction.commandName;\n        } else {\n            return null;\n        }\n    }\n\n    handleChangeLanguage = (event: SyntheticEvent<HTMLSelectElement>) => {\n        this.setStateSettings({\n            language: event.currentTarget.value\n        });\n    };\n\n    handleChangeProgram = (program: Program) => {\n        this.setProgram(program);\n    };\n\n    handleClickRun = () => {\n        if (this.turtleGraphicsRef.current !== null) {\n            this.turtleGraphicsRef.current.clear();\n        }\n        if (this.turtleGraphicsRef.current !== null) {\n            this.turtleGraphicsRef.current.home();\n        }\n        this.interpreter.run(this.state.program);\n    };\n\n    handleClickConnectDash = () => {\n        this.setState({\n            dashConnectionStatus: 'connecting'\n        });\n        this.dashDriver.connect().then(() => {\n            this.setState({\n                dashConnectionStatus: 'connected'\n            });\n        }, (error) => {\n            console.log('ERROR');\n            console.log(error.name);\n            console.log(error.message);\n            this.setState({\n                dashConnectionStatus: 'notConnected'\n            });\n        });\n    };\n\n    handleModeChange = (event: any) => {\n        let mode = event.target.name === 'text' ? 'text' : 'block';\n        this.setStateSettings({\n            editorMode : mode\n        });\n    };\n\n    handleSpeechCommand = (word: string) => {\n        this.interpreter.doCommand(word);\n    };\n\n    handleToggleSpeech = (event: any) => {\n        this.setState({\n            speechRecognitionOn : event.target.checked\n        })\n    };\n\n    handleAppendToProgram = (command: string) => {\n        this.setState((state) => {\n            return {\n                program: this.state.program.concat([command]),\n                programVer: state.programVer + 1\n            }\n        });\n    };\n\n    handleCommandFromCommandPalette = (command: ?string) => {\n        if (command) {\n            this.setState({\n                selectedAction: {\n                    type: 'command',\n                    commandName: command\n                }\n            });\n        } else {\n            this.setState({\n                selectedAction: null\n            });\n        }\n    };\n\n    handleSelectAction = (action: SelectedAction) => {\n        this.setState({\n            selectedAction: action\n        });\n    };\n\n    render() {\n        return (\n            <IntlProvider\n                    locale={this.state.settings.language}\n                    messages={messages[this.state.settings.language]}>\n                <Container>\n                    <Row className='App__mode-and-robots-section'>\n                        <Col>\n                            <Dropdown>\n                                <Dropdown.Toggle>\n                                    <FormattedMessage id='App.changeMode' />\n                                </Dropdown.Toggle>\n                                <Dropdown.Menu onClick={this.handleModeChange}>\n                                    <Dropdown.Item name='text'>\n                                        <FormattedMessage id='App.textMode' />\n                                    </Dropdown.Item>\n                                    <Dropdown.Item name='block'>\n                                        <FormattedMessage id='App.blockMode' />\n                                    </Dropdown.Item>\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Col>\n                        <Col>\n                            {this.state.settings.dashSupport &&\n                                <DeviceConnectControl\n                                        onClickConnect={this.handleClickConnectDash}\n                                        connectionStatus={this.state.dashConnectionStatus}>\n                                    <FormattedMessage id='App.connectToDash' />\n                                </DeviceConnectControl>\n                            }\n                        </Col>\n                    </Row>\n                    <Row className='App__editor-and-graphics-section'>\n                        <Col>\n                            <EditorContainer\n                                program={this.state.program}\n                                programVer={this.state.programVer}\n                                syntax={this.syntax}\n                                mode={this.state.settings.editorMode}\n                                selectedAction={this.state.selectedAction}\n                                onSelectAction={this.handleSelectAction}\n                                onChange={this.handleChangeProgram}\n                                />\n                        </Col>\n                        <Col>\n                            <div>\n                                <TurtleGraphics ref={this.turtleGraphicsRef} />\n                            </div>\n                            <div className='App__interpreter-controls'>\n                                <button onClick={this.handleClickRun} aria-label={`Run current program ${this.state.program.join(' ')}`}>\n                                    <Image src={playIcon} />\n                                </button>\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row className='App__command-palette'>\n                        <Col>\n                            {localizeProperties((intl) =>\n                                <CommandPalette id='commandPalette' defaultActiveKey='movements' >\n                                    <CommandPaletteCategory eventKey='movements' title={(intl.formatMessage({ id: 'CommandPalette.movementsTitle' }))}>\n                                        <CommandPaletteCommand commandName='forward' icon={arrowUp} selectedCommandName={this.getSelectedCommandName()} onChange={this.handleCommandFromCommandPalette}/>\n                                        <CommandPaletteCommand commandName='left' icon={arrowLeft} selectedCommandName={this.getSelectedCommandName()} onChange={this.handleCommandFromCommandPalette}/>\n                                        <CommandPaletteCommand commandName='right' icon={arrowRight} selectedCommandName={this.getSelectedCommandName()} onChange={this.handleCommandFromCommandPalette}/>\n                                    </CommandPaletteCategory>\n                                    <CommandPaletteCategory eventKey='sounds' title={(intl.formatMessage({ id: 'CommandPalette.soundsTitle' }))}>\n                                    </CommandPaletteCategory>\n                                </CommandPalette>\n                            )}\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            {localizeProperties((intl) =>\n                                <Form.Check\n                                    type='switch'\n                                    id='custom-switch'\n                                    label={(intl.formatMessage({ id: 'App.speechRecognition'}))}\n                                    disabled={!this.appContext.speechRecognitionApiIsAvailable}\n                                    checked={this.state.speechRecognitionOn}\n                                    onChange={this.handleToggleSpeech}\n                                />\n                            )}\n                             <div>\n                                <MicMonitor\n                                    enabled = {this.state.speechRecognitionOn}\n                                />\n                            </div>\n                        </Col>\n                    </Row>\n                    <Row>\n                        <Col>\n                            <select\n                                    value={this.state.settings.language}\n                                    onChange={this.handleChangeLanguage}>\n                                <option value='en'>English</option>\n                                <option value='fr'>Français</option>\n                            </select>\n                        </Col>\n                    </Row>\n                </Container>\n            </IntlProvider>\n        );\n    }\n\n    componentDidUpdate(prevProps: {}, prevState: AppState) {\n        // Dash Connection Status\n        if (this.state.dashConnectionStatus !== prevState.dashConnectionStatus) {\n            console.log(this.state.dashConnectionStatus);\n\n            // TODO: Handle Dash disconnection\n\n            if (this.state.dashConnectionStatus === 'connected') {\n                this.interpreter.addCommandHandler('forward', 'dash',\n                    this.dashDriver.forward.bind(this.dashDriver));\n                this.interpreter.addCommandHandler('left', 'dash',\n                    this.dashDriver.left.bind(this.dashDriver));\n                this.interpreter.addCommandHandler('right', 'dash',\n                    this.dashDriver.right.bind(this.dashDriver));\n            }\n        }\n\n        // Speech Recognition\n        if (this.state.speechRecognitionOn !== prevState.speechRecognitionOn) {\n            if (this.state.speechRecognitionOn) {\n                this.webSpeechInput.start();\n            } else {\n                this.webSpeechInput.stop();\n            }\n        }\n    }\n}\n","// @flow\n\nfunction bluetoothApiIsAvailable(): boolean {\n    return !!((navigator: any).bluetooth);\n}\n\nfunction speechRecognitionApiIsAvailable(): boolean {\n    return !!((window: any).webkitSpeechRecognition);\n}\n\nexport { bluetoothApiIsAvailable, speechRecognitionApiIsAvailable };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}